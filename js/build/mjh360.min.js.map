{"version":3,"sources":["../src/mjh360.js"],"names":["define","Empty","Function","prototype","bind","viewport","element","querySelector","that","target","this","goForwardsInTime","navigation","addEventListener","bound","result","apply","hasOwnProperty","call","arguments","sceneData","afterScene","viewer","view","navButton","currentScene","defineGetter","defineSetter","lookupGetter","supportsAccessors","currentTime","console","Array","prototypeOfObject","Object","_Array_slice_","prototypeOfArray","slice","_toString","sceneSelector","sceneTimeToSelector","goBackwardsInTime","__defineGetter__","time","__defineSetter__","__lookupGetter__","lookupSetter","__lookupSetter__","l","lengthBefore","array","makeArray","splice","sceneGoToTime","args","e","preventDefault","array_splice","start","deleteCount","length","concat"],"mappings":"yHAAA,kBAAAA,0EAyBiC,QAAAC,uZAE7BC,SAAAC,UAAAC,OACAF,SAAKG,UAAWC,KAAQC,SAAcC,GAEtC,GAAAC,GAAAC,IAEA,IAAwBJ,kBAAnBK,GACAC,KAAAA,IAAaN,WAAQC,kDAA1BE,EAGA,IAAKE,GAAAA,EAAiBE,KAAAA,UAAiB,GAQvCC,EAAA,iCAaE,GAAAC,GAAAN,EAAAO,WAOeC,EAAAA,OAAAA,EAA0BC,KAAAC,YAEvCC,OAAUC,QAAAA,KAAkBC,EAClBF,EAEGG,oBAuBHC,EACAA,EAAAA,OAAUX,EAAiBK,KAAAC,oBAMvCV,GAAAN,oCAEKsB,EAAAA,UAAL,GAAAxB,GA5E2BA,EAAAE,UAAA,SA8G7B,IASEuB,GACAC,EACDC,IAEDC,EAbAX,EAAKhB,SAAK4B,UAALZ,KACHa,EAAaC,MAAA7B,UACb8B,EAAAC,OAAA/B,UACDgC,EAAAC,EAAAC,MAEDC,EAAIC,EAAAA,KAAgBN,EAAKO,yCASvBX,EAAKY,EAALR,EAAqC,uBACrCP,EAAKf,EAAAA,KAALsB,EAAuCS,kBACxCf,EAAWgB,EAAAA,KAASV,EAAUW,kBAC7BhB,EAAKjB,EAAAA,KAALsB,EAAoCY,kBACpCC,EAAKL,EAAAA,KAAAA,EAALM,uFAeF,QAAIR,GAAJS,GAEET,IADGI,GAAAA,MACHJ,KACKE,EAAAA,QAAAA,EAFP,OAIYE,GAGV,GACKM,GADLC,+CAKFA,EAAOX,OAAAA,KAAPW,EAAA,EAAA,GAAAlC,MAAA,KAAAmC,EAAA,gBAIFD,EAAAE,OAAA,EAAA,EAAA,sEAmBOC,GAAAA,GAENC,EAAAnB,EAAAjB,KAAAC,UAAA,+XAfCa,MAAK7B,UAAaiD,OAAA,SAAmBG,EAAEC,2BAIrBC,EAAKhC,MAAvBf,MACe,SAAbgD,EAAa,EAAAA,EACb,SAAAC,EAAAjD,KAAAkD,OAAAF,EAAAC,GACDE,OAAA1B,EAAAjB,KAAAC,UAAA","file":"mjh360.min.js","sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Creates a 360 virtual gallery, with before and after support.\n */\nclass mjh360 {\n\n  /**\n   * @param sceneList array An array of objects including name, thumb, before and after\n   * @return mjh360 The new mjh360 class\n   */\n  constructor(element,sceneList) {\n\n    //Hook the viewport container.\n    this.viewport = element.querySelector('.vr-viewport');\n\n    //Hook the time travelling buttons.\n    this.goBackwardsInTime = element.querySelector('.vr-before');\n    this.goForwardsInTime = element.querySelector('.vr-after');\n    this.navigation = element.querySelector('.vr-nav');\n\n    this.goBackwardsInTime.addEventListener('click', e => this.sceneGoToTime(e,'before'));\n    this.goForwardsInTime.addEventListener('click', e => this.sceneGoToTime(e,'after'));\n\n    //Create our scene container.\n    this.scenes = [];\n\n    // Create viewer.\n    this.viewer = new Marzipano.Viewer(this.viewport);\n\n    // Create geometry.\n    this.geometry = new Marzipano.EquirectGeometry([{ width: 4000 }]);\n\n    // Create view.\n    this.limiter = Marzipano.RectilinearView.limit.traditional(1024, 100*Math.PI/180);\n    this.view = new Marzipano.RectilinearView({ yaw: Math.PI }, this.limiter);\n\n    //Build the scenes.\n    for ( var i=0; i<sceneList.length; i++ ) {\n      let sceneData = sceneList[i];\n\n      sceneData.beforeSrc = Marzipano.ImageUrlSource.fromString( sceneData.before );\n      sceneData.afterSrc = Marzipano.ImageUrlSource.fromString( sceneData.after );\n      sceneData.beforeScene = this.viewer.createScene({\n        source: sceneData.beforeSrc,\n        geometry: this.geometry,\n        view: this.view,\n        pinFirstLevel: true\n      });\n\n      if ( sceneData.hasOwnProperty('after') ) {\n\n        sceneData.afterScene = this.viewer.createScene({\n          source: sceneData.afterSrc,\n          geometry: this.geometry,\n          view: this.view,\n          pinFirstLevel: true\n        });\n\n      } else {\n        sceneData.afterScene = false;\n      }\n\n      //Add nav item.\n      sceneData.navButton = document.createElement('a');\n      sceneData.navButton.className = 'nav-button';\n\n      let img = document.createElement('img');\n      img.src = sceneData.thumb;\n\n      var pr = this;\n      (function(i){\n        var dynamicOnHook = function(e) {\n          e.preventDefault();\n          pr.sceneActivate(false,i);\n          this.classList.add('active');\n        };\n\n        sceneData.navButton.addEventListener('click', dynamicOnHook);\n        sceneData.navButton.addEventListener('touchstart', dynamicOnHook);\n      })(i);\n\n      sceneData.navButton.appendChild(img);\n      this.navigation.appendChild(sceneData.navButton);\n\n      this.scenes.push(sceneData);\n\n      this.currentScene = 0;\n      this.currentTime = \"before\";\n\n    }\n\n\n  }\n\n  /**\n   * Renders the view\n   * @return void\n   */\n  render() {\n\n    // Display scene.\n    if ( this.scenes.length < 1 ) {\n      console.error('There are no scenes to view.');\n      return false;\n    }\n\n    this.navigation.classList.add('vr-nav-active');\n    this.scenes[0].navButton.classList.add('active');\n    this.scenes[0].beforeScene.switchTo();\n\n  }\n\n  /**\n   * Changes the current time of a scene to either before or after\n   * @param e event The event emitter from a handler\n   * @param time  string  Either \"before\" or \"after\"\n   */\n  sceneGoToTime(e,time) {\n    if ( typeof e !== 'undefined' && e ) e.preventDefault();\n\n    if ( this.currentTime === time ) {\n      console.warn('Already on ' + time + ', not changing.');\n      return false;\n    }\n\n    var sceneSelector = this.sceneTimeToSelector(time);\n\n    if ( time === \"after\" && this.scenes[this.currentScene][sceneSelector] === false ) {\n      //Auto change to before.\n      this.sceneGoToTime(false,'before');\n      return false;\n    }\n\n    if ( time === \"before\" ) {\n      this.goBackwardsInTime.classList.add('vr-button-active');\n      this.goForwardsInTime.classList.remove('vr-button-active');\n    } else if ( time === \"after\" ) {\n      this.goForwardsInTime.classList.add('vr-button-active');\n      this.goBackwardsInTime.classList.remove('vr-button-active');\n    }\n\n    this.scenes[this.currentScene][sceneSelector].switchTo();\n    this.currentTime = time;\n\n  }\n\n  /**\n   * Calculates a scene selector from a requested time\n   * @param time string Before or after\n   * @return string beforeScene or afterScene\n   */\n  sceneTimeToSelector(time) {\n\n    var sceneSelector;\n    if ( time === \"before\" ) {\n      sceneSelector = \"beforeScene\";\n      this.goBackwardsInTime.classList.add('vr-button-active');\n      this.goForwardsInTime.classList.remove('vr-button-active');\n    } else if ( time === \"after\" ) {\n      sceneSelector = \"afterScene\";\n      this.goForwardsInTime.classList.add('vr-button-active');\n      this.goBackwardsInTime.classList.remove('vr-button-active');\n    } else {\n      sceneSelector = \"before\";\n    }\n\n    return sceneSelector;\n\n  }\n\n  /**\n   * Activates a scene\n   * @param e event The event emitter from a handler\n   * @param scene int The scene number\n   */\n  sceneActivate(e,scene) {\n    if ( typeof e !== 'undefined' && e ) e.preventDefault();\n\n    var goToTime = this.currentTime;\n\n    if (! this.scenes[this.currentScene] ) {\n      console.warn('No scene found with this ID.');\n      return false;\n    }\n\n    this.scenes[this.currentScene].navButton.classList.remove('active');\n    this.currentScene = scene;\n    this.currentTime = false;\n\n    this.sceneGoToTime(false,goToTime);\n\n  }\n}\n"]}